---
- name: Hadoop Cluster Setup
  hosts: all
  tasks:
  - name: Import Variables
    include_vars: variables.yml
  - name: Fetch Java version
    shell: java -version 2>&1 | grep version | awk '{print $3}' | sed 's/"//g'
    register: java_version
  - name: Failed when Java version wrong
    fail:
      msg: "The system requried Java Version 1.6 or 1.7, but the system using version {{ java_version.stdout }}"
    when:  java_version.stdout | version_compare('1.8', '>=') or java_version.stdout | version_compare('1.6', '<')   
  - name: Verify hadoop home path
    stat:
      path: "{{ hadoop_home }}"
    register: hadoop_stat
  - name: Create hadoop home folder
    file:
      path: '{{ hadoop_home }}'
      state: directory
    when: hadoop_stat.stat.exists == False
  - name: Copy and Extract if hadoop_home not found
    unarchive:
      src: "/opt/packages/hadoop-0.20.203.0rc1.tgz"
      dest: "{{ hadoop_home }}"
      remote_src: no
    when: hadoop_stat.stat.exists == False
  - name: Create user hfds folder
    file:
      path: '{{ item }}'
      state: directory
      owner: '{{ ansible_user_id }}'
      group: '{{ ansible_user_id }}'
    with_items:
      - "/data/{{ ansible_user_id }}"
      - "/data/{{ ansible_user_id }}/giraph"
      - "/data/{{ ansible_user_id }}/giraph/tmp"
      - "/data/{{ ansible_user_id }}/giraph/dataNode"
      - "/data/{{ ansible_user_id }}/giraph/nameNode"
  - name: Set JAVA_HOME in hadoop-env.sh in RH
    lineinfile:
      dest: "{{ hadoop_home }}/conf/hadoop-env.sh"
      regexp: "JAVA_HOME="
      line: "export JAVA_HOME={{ java_home }}"
  - name: Set HADOOP_OPTS in hadoop-env.sh in RH
    lineinfile:
      dest: "{{ hadoop_home }}/conf/hadoop-env.sh"
      regexp: "HADOOP_OPTS="
      line: "export HADOOP_OPTS=-Djava.net.preferIPv4Stack=true"
  - name: Defined Core setting in "{{ hadoop_home }}/conf/core-site.xml"
    template:
      src: templates/core-site.xml
      dest: "{{ hadoop_home }}/conf/core-site.xml"
  - name: Defined HDFS setting in "{{ hadoop_home }}/conf/hdfs-site.xml"
    template:
      src: templates/hdfs-site.xml
      dest: "{{ hadoop_home }}/conf/hdfs-site.xml"
  - name: Defined MAPRED setting in "{{ hadoop_home }}/conf/mapred-site.xml"
    template:
      src: templates/mapred-site.xml
      dest: "{{ hadoop_home }}/conf/mapred-site.xml"
  - name: Defined MASTER in "{{ hadoop_home }}/conf/masters"
    template:
      src: templates/masters
      dest: "{{ hadoop_home }}/conf/masters"
  - name: Defined SLAVES in "{{ hadoop_home }}/conf/slaves"
    template:
      src: templates/slaves
      dest: "{{ hadoop_home }}/conf/slaves"
  - name: Check namenode FS system created
    stat:
      path: "/data/{{ ansible_user_id }}/giraph/tmp/dfs/name/current/VERSION"
    register: namenode_fs
  - name: Format NameNode FS system if required
    shell: "{{ hadoop_home }}/bin/hadoop namenode -format"
    when: namenode_fs.stat.exists == false and ansible_hostname in groups['namenode']
  - name: Exit safemode
    shell: "{{ hadoop_home }}/bin/hadoop dfsadmin -safemode leave"

